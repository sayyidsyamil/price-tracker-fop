/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.pricetracker;

import static com.mysql.cj.conf.PropertyKey.PASSWORD;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import com.opencsv.CSVReader;
import com.opencsv.exceptions.CsvValidationException;
import java.sql.ResultSet;

/**
 *
 * @author USER
 */


public class Main extends javax.swing.JFrame {
    
    public static int userId;
    public static String publicPath = "C:/Users/USER/Documents/NetBeansProjects/PriceTracker/pricecatcher_2023-08.csv";
    
    private static final String JDBC_URL = "jdbc:mysql://sql12.freesqldatabase.com:3306/sql12673794";
    private static final String DB_USER = "sql12673794";
    private static final String DB_PASSWORD = "jUagV5ukYC";
    
    private void connectToDatabase() throws SQLException {
        try (Connection connection = DriverManager.getConnection(JDBC_URL, DB_USER, DB_PASSWORD);
             Statement statement = connection.createStatement()) {

            // Create lookup_item table
            String createItemTable = "CREATE TABLE IF NOT EXISTS lookup_item ("
                    + "item_code VARCHAR(255) PRIMARY KEY,"
                    + "item VARCHAR(255) NOT NULL,"
                    + "unit VARCHAR(255),"
                    + "item_group VARCHAR(255),"
                    + "item_category VARCHAR(255)"
                    + ")";
            statement.executeUpdate(createItemTable);

            // Create lookup_premise table
            String createPremiseTable = "CREATE TABLE IF NOT EXISTS lookup_premise ("
                    + "premise_code VARCHAR(255) PRIMARY KEY,"
                    + "premise VARCHAR(255) NOT NULL,"
                    + "address VARCHAR(255),"
                    + "premise_type VARCHAR(255),"
                    + "state VARCHAR(255),"
                    + "district VARCHAR(255)"
                    + ")";
            statement.executeUpdate(createPremiseTable);
            
        // Create shopping_cart table
String createShoppingCartTable = "CREATE TABLE IF NOT EXISTS shopping_cart ("
        + "cart_id INT AUTO_INCREMENT PRIMARY KEY,"
        + "user_id INT NOT NULL,"
        + "item_code VARCHAR(255) NOT NULL,"
        + "quantity INT NOT NULL,"
        + "FOREIGN KEY (user_id) REFERENCES users(id),"
        + "FOREIGN KEY (item_code) REFERENCES lookup_item(item_code)"
        + ")";
statement.executeUpdate(createShoppingCartTable);


        }    }

    /**
     * Creates new form Main
     */
    public Main(int userId1) {
        try {
            this.userId = userId;
            initComponents();
            connectToDatabase();
            insertDataFromCSV("https://storage.data.gov.my/pricecatcher/lookup_item.csv", "lookup_item");
            insertDataFromCSV("https://storage.data.gov.my/pricecatcher/lookup_premise.csv", "lookup_premise");
        } catch (SQLException e) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Welcome, user! ");

        jLabel2.setText("Your shopping partner. All in one.");

        jButton1.setText("Settings");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cart");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Import");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Search for a Product");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Browse by Categories");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Choose a CSV file");
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("CSV Files", "csv"));

        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            // Process the selected CSV file as needed
            System.out.println("Selected file: " + selectedFile.getAbsolutePath());
            publicPath = selectedFile.getAbsolutePath();
            System.out.println(publicPath);
        } else {
            // User canceled the file chooser
            System.out.println("File selection canceled.");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private Search searchFrame;
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (searchFrame == null || !searchFrame.isVisible()) {
            searchFrame = new Search();
            searchFrame.setVisible(true);
        } else {
            // If the categoryFrame already exists and is visible, bring it to the front
            searchFrame.toFront();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private Cart cartFrame; 
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (cartFrame == null || !cartFrame.isVisible()) {
        cartFrame = new Cart();
        cartFrame.setVisible(true);
        } else {
            cartFrame.toFront();
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    
    private Settings settingsFrame; 
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       if (settingsFrame == null || !settingsFrame.isVisible()) {
        settingsFrame = new Settings();
        settingsFrame.setVisible(true);
        } else {
            settingsFrame.toFront();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private Category categoryFrame;  // Declare a member variable to store the Category frame instance

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {
        
        if (categoryFrame == null || !categoryFrame.isVisible()) {
        categoryFrame = new Category(publicPath);
        categoryFrame.setVisible(true);
        } else {
            categoryFrame.toFront();
        }
            
    }
                                            

    /**
     * @param args the command line arguments
     */
    private void insertDataFromCSV(String csvURL, String tableName) {
        try {
            URL url = new URL(csvURL);
            Path tempFile = Files.createTempFile("temp", ".csv");
            Files.copy(url.openStream(), tempFile, StandardCopyOption.REPLACE_EXISTING);

            try (CSVReader reader = new CSVReader(new FileReader(tempFile.toFile()));
                 Connection connection = DriverManager.getConnection(JDBC_URL, DB_USER, DB_PASSWORD)) {

                if (tableHasData(connection, tableName)) {
                    System.out.println(tableName + " table already contains data. Skipping insertion.");
                    return;
                }

                String[] header = reader.readNext();

                String[] data;
                while ((data = reader.readNext()) != null) {
                    String code = data[0];
                    if (shouldSkipInsertion(connection, tableName, code)) {
                        continue;
                    }

                    String insertStatement = buildInsertStatement(header, tableName);

                    try (PreparedStatement preparedStatement = connection.prepareStatement(insertStatement)) {
                        for (int i = 0; i < data.length; i++) {
                            preparedStatement.setString(i + 1, data[i]);
                        }
                        preparedStatement.executeUpdate();
                    }
                }

                System.out.println("Data inserted into " + tableName + " table successfully.");
            }
        } catch (IOException | SQLException | CsvValidationException  e) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    private String buildInsertStatement(String[] header, String tableName) {
        StringBuilder insertStatement = new StringBuilder("INSERT INTO " + tableName + " (");
        for (String column : header) {
            insertStatement.append(column).append(",");
        }
        insertStatement.deleteCharAt(insertStatement.length() - 1);
        insertStatement.append(") VALUES (");

        for (int i = 0; i < header.length; i++) {
            insertStatement.append("?,");
        }
        insertStatement.deleteCharAt(insertStatement.length() - 1);
        insertStatement.append(")");

        return insertStatement.toString();
    }

    private boolean shouldSkipInsertion(Connection connection, String tableName, String code) {
        return code.equals("-1") || codeExists(connection, tableName, code);
    }

    private boolean codeExists(Connection connection, String tableName, String code) {
        String query = "SELECT COUNT(*) FROM " + tableName + " WHERE item_code = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setString(1, code);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    int count = resultSet.getInt(1);
                    return count > 0;
                }
            }
        } catch (SQLException e) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, e);
        }
        return false;
    }

    private boolean tableHasData(Connection connection, String tableName) {
        String query = "SELECT COUNT(*) FROM " + tableName;
        try (PreparedStatement preparedStatement = connection.prepareStatement(query);
             ResultSet resultSet = preparedStatement.executeQuery()) {
            if (resultSet.next()) {
                int count = resultSet.getInt(1);
                return count > 0;
            }
        } catch (SQLException e) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, e);
        }
        return false;
    }

    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main(userId).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
